% LaCaN 2015 (www-lacan.upc.edu) 
%
% Academic 2D HDG code for solving the Stokes equations with Dirichlet 
% boundary conditions.
%
% Main data variables:
%  X: nodal coordinates
%  T: mesh connectivitity matrix
%  F: faces (here sides) for each element 
%    (Faces are numbered so that interior faces are first)
%  elemInfo: element type
%  infoFaces.intFaces: [elem1 face1 elem2 face2 rotation] for each face
%    (Each face is assumed to have the orientation given by the 
%    first element, it is flipped when seen from the second element)
%  infoFaces.extFaces: [elem1 face1] for each exterior face
%  referenceElement: integration points and shape functions (volume and
%    boundary sides)
%

clear all, close all, %home
restoredefaultpath, setpath
warning('off')

meshNameS = cell(4,1);
meshNameS{1}='mesh1_P2.dcm';
meshNameS{2}='mesh2_P2.dcm';
meshNameS{3}='mesh3_P2.dcm';
meshNameS{4}='mesh4_P2.dcm';
errors = []; errorsPost = []; hs=[];
for i=2
    meshName=meshNameS{i};
    hs=[hs,0.5^(i+1)];
%% Load computational mesh 
%meshName = 'mesh2_P1.dcm';
if all(meshName(end-2:end)=='dcm'),GenerateMatFileFromEZ4U(['Meshes/' meshName]); end
load(['Meshes/' meshName(1:end-3) 'mat']); 
nOfElements = size(T,1); nOfElementNodesGeo = size(T,2);
%X = 2*X - 1; % modify the mesh to have it defined in [-1,1]
figure(1),clf,plotMesh(X,T)

%%Degree for approximation <= degreeGeo (degreeApprox==degreeGeo for isoparametric)
degreeApprox=2;

%% HDG preprocess
disp('XHDG preprocess...')
[F infoFaces] = hdg_preprocess(T);
nOfFaces = max(max(F)); nOfExteriorFaces = size(infoFaces.extFaces,1);
degreeGeo=size(elemInfo.faceNodes,2)-1; 

%%reference Element
referenceElement=createReferenceElementTriSuperParametric(degreeApprox,degreeGeo);

%% Viscosity parameter: constant in every element
muElem = 2*ones(nOfElements,1);
%% Stabilization parameter
tau = repmat(1,nOfElements,3); %Uniform tau parameter (all faces)
%tau(:,2:3) = 0; %Non-null only for 1st face in each element

%% Level Sets
%example = 1; % circular interface, standard element
example = 2; %straight interface
LS = EvaluateLS(X,example);
Elements = SetElements(T,LS,[1,0],referenceElement);
figure(1); hold on;
AddFrontPlot (example,X);
hold on;
axis([-0.1 1.1 -0.1 1.1])
hold on;
%AddElementNumber(X,T);

%% Computation
% Loop in elements
disp('Loop in elements...')

[K f localSolverMat localSolverVec] = StokesHDGMatrixSuperParametric(muElem,X,T,F,referenceElement,infoFaces,tau,Elements,LS);

%Dirichlet BC
%Dirichlet face nodal coordinates
nOfFaceNodes = degreeApprox+1; nOfExteriorFaces=size(infoFaces.extFaces,1);
nOfInteriorFaces = size(infoFaces.intFaces,1);
nOfExteriorFaces = size(infoFaces.extFaces,1); 
XDirichlet = zeros(nOfExteriorFaces*nOfFaceNodes,2);
if degreeApprox==degreeGeo %Isoparametric elements
    Naux=eye(nOfFaceNodes); faceNodes = referenceElement.faceNodes;
else %superparametric elements
  [Naux,kk]=evaluateNodalBasis1D(referenceElement.NodesCoord1d,referenceElement.NodesCoord1dGeo,degreeGeo); %for superparametric elements
  faceNodes = referenceElement.faceNodesGeo;
end

[uDirichlet,nullFaces,nullFacesintindx] = computeProjectionFacesSuperparametric2(@analyticalVelocityStokes,X,T,referenceElement,Elements,LS,F,infoFaces);
dofDirichlet=[2*nOfInteriorFaces*nOfFaceNodes + [1:2*(nOfExteriorFaces)*nOfFaceNodes]];  
dofKnown = [dofDirichlet , (2*nOfFaces*nOfFaceNodes)+[Elements.D2;Elements.Int]' , nullFacesintindx]; uKnown =[uDirichlet ; zeros(length([Elements.D2;Elements.Int]),1);zeros(length(nullFacesintindx),1)];
dofUnknown = setdiff([1:size(K,1)],dofKnown);

f = f(dofUnknown)-K(dofUnknown,dofKnown)*uKnown;
K = K(dofUnknown,dofUnknown);

% Face solution
disp('Solving linear system...')
sol = K\f;
lambda = zeros(2*nOfFaces*nOfFaceNodes+[nOfElements],1);
lambda(dofKnown)=uKnown; lambda(dofUnknown)=sol;
uhat=lambda(1:2*nOfFaces*nOfFaceNodes);
rho=lambda(2*nOfFaces*nOfFaceNodes+1:end);
    
% Elemental solution
disp('Calculating element by element solution...')
[u,L,p]=computeElementsSolutionStokes(uhat,rho,localSolverMat,localSolverVec,F,Elements);

%  Plot
% figure(2),clf
% plotDiscontinuosSolutionSuperParametric(X,T,u(:,1),referenceElement,20,Elements)
% colorbar, title('HDG solution: u1')
% 
% figure(3),clf
% plotDiscontinuosSolutionSuperParametric(X,T,u(:,2),referenceElement,20,Elements)
% colorbar, title('HDG solution: u2')
% 
% figure(4),clf
% plotDiscontinuosSolutionSuperParametric(X,T,p,referenceElement,20,Elements)
% colorbar, title('HDG solution: p')

% Local postprocess for superconvergence 
disp('Performing local postprocess...')
p_star = referenceElement.degree + 1;
nOfNodes_star = 0.5*(p_star+1)*(p_star+2);
referenceElement_star = createReferenceElementTriSuperParametric(p_star,degreeGeo);
[u_star,N] = HDGpostprocessStokes(X,T,u,L,referenceElement_star,referenceElement,Elements,muElem(1));

%Plots postprocess solution
% figure(22),clf
% plotDiscontinuosSolutionSuperParametric(X,T,u_star(:,1),referenceElement_star,20,Elements)
% colorbar, title('HDG solution: u1*')
% 
% figure(32),clf
% plotDiscontinuosSolutionSuperParametric(X,T,u_star(:,2),referenceElement_star,20,Elements)
% colorbar, title('HDG solution: u2*')


%% Error

% analytical solution
u1_ex = @analyticalVelocityStokes_u1;
u2_ex = @analyticalVelocityStokes_u2;

%Error std Elements
nOfElementNodes = size(referenceElement.NodesCoord,1);
error2std = zeros(length(Elements.D1),1);
    for i=1:length(Elements.D1)
        iElem = [Elements.D1(i)];
        ind = (iElem-1)*nOfElementNodes+1:iElem*nOfElementNodes;
        error2std(iElem) = computeL2NormSuperParametric(referenceElement,X(T(iElem,:),:),(1:nOfElementNodesGeo),u(ind,1),u1_ex)^2 ...
            +computeL2NormSuperParametric(referenceElement,X(T(iElem,:),:),(1:nOfElementNodesGeo),u(ind,2),u2_ex)^2;
    end 
Errorstd = sqrt(sum(error2std));
%Error Cut Elements 
nOfElementNodes = size(referenceElement.NodesCoord,1);
error2cut = zeros(length(Elements.Int),1);
    for i=1:length(Elements.Int)
        iElem = Elements.Int(i);
        ind = (iElem-1)*nOfElementNodes+1:iElem*nOfElementNodes;
        error2cut(iElem) = computeL2NormSuperParametricCut(LS(T(iElem,:)),referenceElement,X(T(iElem,:),:),(1:nOfElementNodesGeo),u(ind,1),u1_ex)^2 ...
            +computeL2NormSuperParametricCut(LS(T(iElem,:)),referenceElement,X(T(iElem,:),:),(1:nOfElementNodesGeo),u(ind,2),u2_ex)^2;
    end   
Errorcut = sqrt(sum(error2cut));
disp(['Error XHDG = ', num2str(sqrt(Errorstd.^2+Errorcut.^2))]);

Error=sqrt(Errorstd.^2+Errorcut.^2);

nOfElementNodes_star = size(referenceElement_star.NodesCoord,1);
% Error for the postprocessed std Elements 
error_post2 = zeros(length(Elements.D1),1);
for i=1:length(Elements.D1)
    iElem = Elements.D1(i);
    ind = (iElem-1)*nOfNodes_star+1:iElem*nOfNodes_star;
    Te = T(iElem,:);
    Xe = X(Te,:);
    Xe=N*Xe;
    error_post2(iElem)=computeL2NormSuperParametric(referenceElement_star,Xe,(1:nOfElementNodes_star),u_star(ind,1),u1_ex).^2 ...
    +computeL2NormSuperParametric(referenceElement_star,Xe,(1:nOfElementNodes_star),u_star(ind,2),u2_ex).^2;
end
ErrorPoststd = sqrt(sum(error_post2.^2));

% Error for the postprocessed Cut Elements
error_post2 =zeros(length(Elements.Int),1);

for i=1:length(Elements.Int)
    iElem = Elements.Int(i);
    ind = (iElem-1)*nOfNodes_star+1:iElem*nOfNodes_star;
    Te = T(iElem,:);
    Xe = X(Te,:);
    Xe=N*Xe;
    LSe_star = EvaluateLS(Xe,2);
    error_post2(iElem)=computeL2NormSuperParametricCut(LSe_star,referenceElement_star,Xe,(1:nOfElementNodes_star),u_star(ind,1),u1_ex).^2 ...
    +computeL2NormSuperParametricCut(LSe_star,referenceElement_star,Xe,(1:nOfElementNodes_star),u_star(ind,2),u2_ex).^2;
end
ErrorPostcut = sqrt(sum(error_post2.^2));
disp(['Error XHDG postprocessed = ', num2str(sqrt(ErrorPoststd.^2+ErrorPostcut.^2))]);
disp(' ')
ErrorPost=sqrt(ErrorPoststd.^2+ErrorPostcut.^2);
%convergencePlots2

    errors = [errors, Error];
    errorsPost = [errorsPost, ErrorPost];
end

figure(11), clf
plot(log10(hs),log10(errors),'-o',log10(hs),log10(errorsPost),'o-','LineWidth',1.4);
legend('u','u*')

slopes = (log10(errors(2:end))-log10(errors(1:end-1)))./(log10(hs(2:end))-log10(hs(1:end-1)))
slopesPost = (log10(errorsPost(2:end))-log10(errorsPost(1:end-1)))./(log10(hs(2:end))-log10(hs(1:end-1)))








