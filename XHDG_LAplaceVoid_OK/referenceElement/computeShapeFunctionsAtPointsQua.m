function shapeFunctions=computeShapeFunctionsAtPointsQua(nDeg,coord,points)
%
% shapeFunctions=computeShapeFunctionsAtPointsQua(nDeg,coord,points)
%

nOfPoints = size(points,1); 
nOfNodes = size(coord,1);
shapeFunctions = zeros(nOfNodes,nOfPoints,3);

%Shape functions and derivatives
xi = points(:,1); eta = points(:,2);
switch nDeg
    case 1 %Q1
        N    = [(1-xi).*(1-eta)/4, (1+xi).*(1-eta)/4, ...
            (1+xi).*(1+eta)/4, (1-xi).*(1+eta)/4];
        Nxi  = [(eta-1)/4, (1-eta)/4, (1+eta)/4, -(1+eta)/4];
        Neta = [(xi-1)/4, -(1+xi)/4,   (1+xi)/4,  (1-xi)/4 ];
    case 2 %Q2
        N    = [xi.*(xi-1).*eta.*(eta-1)/4, xi.*(xi+1).*eta.*(eta-1)/4, ...
            xi.*(xi+1).*eta.*(eta+1)/4, xi.*(xi-1).*eta.*(eta+1)/4, ...
            (1-xi.^2).*eta.*(eta-1)/2,  xi.*(xi+1).*(1-eta.^2)/2,   ...
            (1-xi.^2).*eta.*(eta+1)/2,  xi.*(xi-1).*(1-eta.^2)/2,   ...
            (1-xi.^2).*(1-eta.^2)];
        Nxi  = [(xi-1/2).*eta.*(eta-1)/2,   (xi+1/2).*eta.*(eta-1)/2, ...
            (xi+1/2).*eta.*(eta+1)/2,   (xi-1/2).*eta.*(eta+1)/2, ...
            -xi.*eta.*(eta-1),          (xi+1/2).*(1-eta.^2),   ...
            -xi.*eta.*(eta+1),          (xi-1/2).*(1-eta.^2),   ...
            -2*xi.*(1-eta.^2)];
        Neta = [xi.*(xi-1).*(eta-1/2)/2,    xi.*(xi+1).*(eta-1/2)/2, ...
            xi.*(xi+1).*(eta+1/2)/2,    xi.*(xi-1).*(eta+1/2)/2, ...
            (1-xi.^2).*(eta-1/2),       xi.*(xi+1).*(-eta),   ...
            (1-xi.^2).*(eta+1/2),       xi.*(xi-1).*(-eta),   ...
            (1-xi.^2).*(-2*eta)];
    otherwise
        error('Shape functions not implemented yet')
end
shapeFunctions(:,:,1) = N';
shapeFunctions(:,:,2) = Nxi';
shapeFunctions(:,:,3) = Neta';
